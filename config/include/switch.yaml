
### SWITCHES
### FLUX
- platform: flux
  lights:
    - light.hue_big_floor_lamp
    - light.hue_small_floor_lamp
    - light.hue_table_lamp
    - light.hue_tv_backlight
  name: 'Flux'
  start_time: '7:00'
  stop_time: '23:00'
  start_colortemp: 4000
  sunset_colortemp: 3000
  stop_colortemp: 1900
  brightness: 200
  disable_brightness_adjust: True
  mode: xy
  transition: 30
  interval: 60

### HUE OUTSIDE
- platform: template
  switches:
    hue_lights_outside:
      friendly_name: "Hue Outside"
      value_template: >
        {{ is_state('light.hue_outside_all', 'on') }}
      turn_on:
        service: script.turn_on
        data:
          entity_id: script.hue_lights_outside_full
      turn_off:
        service: script.turn_on
        data:
          entity_id: script.hue_lights_outside_off
      icon_template: >
        {% if is_state('light.hue_outside_all', 'on') %}
          mdi:lightbulb-on
        {% else %}
          mdi:lightbulb
        {% endif %}

### HUE LIVING ROOM
- platform: template
  switches:
    hue_lights_living_room:
      friendly_name: "Hue Living Room"
      value_template: >
        {{ is_state('light.hue_living_room_all', 'on') }}
      turn_on:
        service: script.turn_on
        data:
          entity_id: script.hue_lights_living_room_full
      turn_off:
        service: script.turn_on
        data:
          entity_id: script.hue_lights_living_room_off
      icon_template: >
        {% if is_state('light.hue_living_room_all', 'on') %}
          mdi:lightbulb-on
        {% else %}
          mdi:lightbulb
        {% endif %}

### DOCKER
- platform: rest
  resource: !secret docker_hadockermon
  name: 'Docker HaDockermon'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_homeassistant
  name: 'Docker HomeAssistant'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_nodered
  name: 'Docker NodeRed'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_nzbget
  name: 'Docker NZBGet'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_mqtt
  name: 'Docker MQTT'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_plex
  name: 'Docker Plex'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_radarr
  name: 'Docker Radarr'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_sonarr
  name: 'Docker Sonarr'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

- platform: rest
  resource: !secret docker_watchtower
  name: 'Docker Watchtower'
  body_on: '{"state": "start"}'
  body_off: '{"state": "stop"}'
  is_on_template: >
    {{ value_json is not none and value_json.state == "running" }}

### COMMAND LINE
#- platform: command_line
#  switches:
#    synoindex:
#      command_on: !secret synoindex
